{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOMSbNqXBk0vGYCXE4qbxR4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Maarioon/Learning-Python/blob/main/21_10_22.ipynb.%20practice%20after%20listening%20classes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zQKCVNW_kgSY",
        "outputId": "d3303821-b89d-4b7f-a581-d017a37f6c20"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "It's a hot day\n",
            "Enjoy your day\n",
            "down payment: 100000.0\n",
            "Eligible for loan\n",
            "Eligible for loan\n",
            "it's not a hot day\n",
            "it's a hot day\n",
            "Name must be at least 3 characters \n",
            "efregfreh\n",
            "(L)bs or (K)g: 80\n"
          ]
        }
      ],
      "source": [
        "from traitlets.traitlets import Long\n",
        " #to know the length of characters in a string- len is used\n",
        " #print(len(course))\n",
        " # full stop or . is used to bring out other options and they are calles methas\n",
        " #course.upper\n",
        " #when an option belongs to or is specific to something they are called methas\n",
        " #methas just creates a new string by modifying it and runs it, it does not change the current string\n",
        " #there are different methas: find,replace,upper,lower etc. (course.find('o')), be specific using lower and uppercase because the program only responds to what you put in.\n",
        "# to check the existence of a character the 'in' operator is used\n",
        "#print('Python' in course ). it usually gives a boolean value, which means is Python in course?true or false.\n",
        "\n",
        "#Aritmetic Operations.\n",
        "# addition\n",
        "#subtraction\n",
        "#division / which gives floats 1.333\n",
        "#dividion // which gives integers 1\n",
        "#mojulous % which is a percent sign , it returns the remaining of a divided no.. i.e the 1 that remains in 10//3\n",
        "#exponent which is a powe **- 10**3= 1000\n",
        "#augmented assignment operation= , this writes a code in a shorter form x = x + 3 is the same as x +=3\n",
        "#maths has operation presidence = BODMAS, it usually is very important while calculating and python uses it too.\n",
        "#x = 10 + 3 * 2, start by multiplying before adding, = 16\n",
        "#eg 2 : x = 10 + 3 * 2 ** 2 , here 2**2 will be first answered, 2 to the power of 2 = 4 * 3= 12+10= 22\n",
        "#parenthesis always takes priority which is bracket, \n",
        "# x = (2 + 3) * 10 - 3 which is 5 * 10= 50 - 3 = 47\n",
        "# use of numbers \n",
        "#using built in round function\n",
        "#x = 2.9\n",
        "#round function will round it up to 3\n",
        "# abs or absolute whuch returns to a positive number\n",
        "# x = -2.9, ancwer will be 2.9\n",
        "#there are a lot of functions to use\n",
        "#if you have complicated maths operations it is better to use the 'math' module, this helps with every operations and their specifics.\n",
        "#they can also be reused and are used to orgaise the code. reuseable functions using mathematical operations.\n",
        "#maths.(the dot will bring out the options attached to the math function)\n",
        "#search for python 3 math module on GOOGLE to learn more about it\n",
        "#IF STATEMENTS\n",
        "\n",
        "is_hot = True\n",
        "is_cold = False\n",
        "\n",
        "if is_hot:\n",
        "   print(\"It's a hot day\") \n",
        "   print(\"Enjoy your day\")\n",
        "elif is_cold:\n",
        "    print(\"wear warm cloth\")\n",
        "    print(\"have a nice day\")\n",
        "else:\n",
        "  print(\"have a lovely day ahead\")\n",
        "\n",
        "price = 1000000\n",
        "has_good_credit = True\n",
        "\n",
        "if has_good_credit:\n",
        "  down_payment = 0.1 * price\n",
        "else:\n",
        "   down_payment = 0.2 * price\n",
        "print(f\"down payment: {down_payment}\")\n",
        "\n",
        "# if an applicant has high income and good credit is eligible for loan\n",
        "#logical AND operators\n",
        "\n",
        "has_high_income = True\n",
        "has_good_credit = True\n",
        "\n",
        "if has_high_income and has_good_credit:\n",
        "  print(\"Eligible for loan\")\n",
        "# if an applicant has high income OR good credit is eligible for loan\n",
        "#logical OR operators\n",
        "\n",
        "has_high_income = True\n",
        "has_good_credit = True\n",
        "\n",
        "if has_high_income or has_good_credit:\n",
        "  print(\"Eligible for loan\")\n",
        "##logical AND operators , both conditions are true\n",
        "#logical OR operators, at least one of the conditions is true\n",
        "\n",
        "#logical Not operators, converts the value to the opposite\n",
        "\n",
        "has_high_income = True\n",
        "has_criminal_record = True\n",
        "\n",
        "if has_high_income and not has_criminal_record:\n",
        "  print(\"Eligible for loan\")\n",
        "#comparison operators are used to compare a variable with a value\n",
        "\n",
        "#if temperature is greater than 30\n",
        "#it's a hot day\n",
        "#otherwise if it's less than 10 \n",
        "#it's a cold day\n",
        "#otherwise\n",
        "#it's neither hot nor cold\n",
        "\n",
        "temperature = 30\n",
        "\n",
        "if temperature > 30:\n",
        "  print(\"it's a hot day\")\n",
        "else:\n",
        "  print(\"it's not a hot day\")\n",
        "\n",
        "if temperature == 30:\n",
        "  print(\"it's a hot day\")\n",
        "else:\n",
        "  print(\"it's not a hot day\")\n",
        "#== equality sign\n",
        "#=! not equals to\n",
        "\n",
        "# exercise\n",
        "# if name is less than 3 characters long\n",
        "#name must be at least 3 characters\n",
        "#otherwise if it's more than 50 characters long\n",
        "#name can be a maximum of 50 characters\n",
        "#otherwise\n",
        "#name looks good!\n",
        "\n",
        "name = 'M'\n",
        "\n",
        "#legtrh or len of name is used to determine the length of the name\n",
        "if len(name) < 3:\n",
        "  print(\"Name must be at least 3 characters \")\n",
        "\n",
        "elif len(name) > 50:\n",
        "  print(\"name must be a maximum of 50 characters\")\n",
        "\n",
        "else:\n",
        "  print(\"name looks good\")\n",
        "\n",
        "#weight converter\n",
        "\n",
        "#Weight: 80\n",
        "#(L)bs or (K)g:\n",
        "\n",
        "weight = int(input ())\n",
        "unit = input('(L)bs or (K)g: ')\n",
        "\n",
        "if unit.upper() == \"L\" :\n",
        "   converted = weight * 0.45\n",
        "   print(f\"You are {converted} kilos\")\n",
        "else:\n",
        "  converted = weight / 0.45\n",
        "  print(f\" You are {converted} pounds\")"
      ]
    }
  ]
}